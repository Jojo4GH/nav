package de.jonasbroeckmann.nav.config

import com.github.ajalt.mordant.rendering.TextColors
import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb
import com.github.ajalt.mordant.rendering.TextStyle
import com.github.ajalt.mordant.rendering.TextStyles
import de.jonasbroeckmann.nav.Styles

object Themes {

    /**
     * The default theme with a retro look.
     */
    val Retro = themed(
        main = rgb("00DBB7"),
        style1 = rgb("F71674"),
        style2 = rgb("F5741D"),
        style3 = rgb("009FFD"),
    )

    /**
     * Only monochrome colors.
     */
    val Monochrome = themed(
        main = TextColors.white,
        style1 = TextColors.white,
        style2 = TextColors.white,
        style3 = TextColors.white,
    )

    /**
     * A simple theme supporting basic 16 color terminals.
     */
    val SimpleColor = themed(
        main = TextColors.brightGreen,
        style1 = TextColors.brightMagenta,
        style2 = TextColors.brightYellow,
        style3 = TextColors.brightCyan,
    )

    val Random = Styles(
        path = randomBrightColor(),
        filter = randomBrightColor(),
        filterMarker = randomBrightColor(),
        keyHints = randomBrightColor(),
        keyHintLabels = randomBrightColor(),
        genericElements = randomBrightColor(),
        permissionRead = randomBrightColor(),
        permissionWrite = randomBrightColor(),
        permissionExecute = randomBrightColor(),
        permissionHeader = randomBrightColor(),
        hardlinkCount = randomBrightColor(),
        hardlinkCountHeader = randomBrightColor(),
        user = randomBrightColor(),
        userHeader = randomBrightColor(),
        group = randomBrightColor(),
        groupHeader = randomBrightColor(),
        entrySize = randomBrightColor(),
        entrySizeHeader = randomBrightColor(),
        modificationTime = randomBrightColor(),
        modificationTimeHeader = randomBrightColor(),
        directory = randomBrightColor(),
        file = randomBrightColor(),
        link = randomBrightColor(),
        nameHeader = randomBrightColor(),
        nameDecorations = randomBrightColor(),
    )

    val Sunset = Styles(
        path = rgb("F16767"),
        filter = rgb("FFF085"),
        filterMarker = rgb("FFF085"),
        permissionRead = rgb("FCB454"),
        user = rgb("FCB454"),
        group = rgb("FCB454"),
        directory = rgb("FCB454"),
        permissionWrite = rgb("FF9B17"),
        hardlinkCount = rgb("FF9B17"),
        entrySize = rgb("FF9B17"),
        file = rgb("FF9B17"),
        permissionExecute = rgb("F16767"),
        modificationTime = rgb("F16767"),
        link = rgb("F16767"),
        keyHints = rgb("F16767"),
        keyHintLabels = rgb("7F7F7F"),
        genericElements = rgb("7F7F7F"),
        permissionHeader = rgb("7F7F7F"),
        hardlinkCountHeader = rgb("7F7F7F"),
        userHeader = rgb("7F7F7F"),
        groupHeader = rgb("7F7F7F"),
        entrySizeHeader = rgb("7F7F7F"),
        modificationTimeHeader = rgb("7F7F7F"),
        nameHeader = rgb("7F7F7F"),
        nameDecorations = rgb("7F7F7F"),
    )

    val Xmas = Styles(
        path = rgb("#7bb81b"),
        filter = rgb("#7bb81b"),
        filterMarker = rgb("#7bb81b"),
        permissionRead = rgb("#cc1d1d"),
        user = rgb("#cc1d1d"),
        group = rgb("#cc1d1d"),
        directory = rgb("#cc1d1d"),
        permissionWrite = rgb("#fffaf3"),
        hardlinkCount = rgb("#fffaf3"),
        entrySize = rgb("#fffaf3"),
        file = rgb("#fffaf3"),
        permissionExecute = rgb("#ffb093"),
        modificationTime = rgb("#ffb093"),
        link = rgb("#ffb093"),
        keyHints = rgb("#eb4242"),
        keyHintLabels = rgb("#7F7F7F"),
        genericElements = rgb("#7F7F7F"),
        permissionHeader = rgb("#7F7F7F"),
        hardlinkCountHeader = rgb("#7F7F7F"),
        userHeader = rgb("#7F7F7F"),
        groupHeader = rgb("#7F7F7F"),
        entrySizeHeader = rgb("#7F7F7F"),
        modificationTimeHeader = rgb("#7F7F7F"),
        nameHeader = rgb("#7F7F7F"),
        nameDecorations = rgb("#7F7F7F"),
    )

    val Hub = Styles(
        path = rgb("#ff9000"),
        filter = rgb("#ff9000"),
        filterMarker = rgb("#ff9000"),
        permissionRead = rgb("#ff9000"),
        user = rgb("#ff9000"),
        group = rgb("#ff9000"),
        directory = rgb("#ff9000"),
        permissionWrite = rgb("#ffffff"),
        hardlinkCount = rgb("#ffffff"),
        entrySize = rgb("#ffffff"),
        file = rgb("#ffffff"),
        permissionExecute = rgb("#808080"),
        modificationTime = rgb("#808080"),
        link = rgb("#808080"),
        keyHints = rgb("#ff9000"),
        keyHintLabels = rgb("#7F7F7F"),
        genericElements = rgb("#7F7F7F"),
        permissionHeader = rgb("#7F7F7F"),
        hardlinkCountHeader = rgb("#7F7F7F"),
        userHeader = rgb("#7F7F7F"),
        groupHeader = rgb("#7F7F7F"),
        entrySizeHeader = rgb("#7F7F7F"),
        modificationTimeHeader = rgb("#7F7F7F"),
        nameHeader = rgb("#7F7F7F"),
        nameDecorations = rgb("#7F7F7F"),
    )

    val Ice = Styles(
        path = rgb("#cdf1ff"),
        filter = rgb("#cdf1ff"),
        filterMarker = rgb("#cdf1ff"),
        permissionRead = rgb("#64B5F6"),
        user = rgb("#64B5F6"),
        group = rgb("#64B5F6"),
        directory = rgb("#64B5F6"),
        permissionWrite = rgb("#B2EBF2"),
        hardlinkCount = rgb("#B2EBF2"),
        entrySize = rgb("#B2EBF2"),
        file = rgb("#B2EBF2"),
        permissionExecute = rgb("#E1F5FE"),
        modificationTime = rgb("#5bd0ff"),
        link = rgb("#B2EBF2"),
        keyHints = rgb("#5bd0ff"),
        keyHintLabels = rgb("#0077CC"),
        genericElements = rgb("#0077CC"),
        permissionHeader = rgb("#0077CC"),
        hardlinkCountHeader = rgb("#0077CC"),
        userHeader = rgb("#0077CC"),
        groupHeader = rgb("#0077CC"),
        entrySizeHeader = rgb("#0077CC"),
        modificationTimeHeader = rgb("#0077CC"),
        nameHeader = rgb("#0077CC"),
        nameDecorations = rgb("#0077CC"),
    )

    val Darcula = Styles(
        path = rgb("#9876aa"),
        filter = rgb("#9876aa"),
        filterMarker = rgb("#9876aa"),
        permissionRead = rgb("#769aa5"),
        user = rgb("#769aa5"),
        group = rgb("#769aa5"),
        directory = rgb("#769aa5"),
        permissionWrite = rgb("#cc7832"),
        hardlinkCount = rgb("#cc7832"),
        entrySize = rgb("#cc7832"),
        file = rgb("#cc7832"),
        permissionExecute = rgb("#a5c25c"),
        modificationTime = rgb("#a5c25c"),
        link = rgb("#a5c25c"),
        keyHints = rgb("#9876aa"),
        keyHintLabels = rgb("#7F7F7F"),
        genericElements = rgb("#7F7F7F"),
        permissionHeader = rgb("#7F7F7F"),
        hardlinkCountHeader = rgb("#7F7F7F"),
        userHeader = rgb("#7F7F7F"),
        groupHeader = rgb("#7F7F7F"),
        entrySizeHeader = rgb("#7F7F7F"),
        modificationTimeHeader = rgb("#7F7F7F"),
        nameHeader = rgb("#7F7F7F"),
        nameDecorations = rgb("#7F7F7F"),
    )

    val AtomOneDark = Styles(
        path = rgb("#c678dd"),
        filter = rgb("#e06b74"),
        filterMarker = rgb("#e06b74"),
        permissionRead = rgb("#98c379"),
        user = rgb("#98c379"),
        group = rgb("#98c379"),
        directory = rgb("#98c379"),
        permissionWrite = rgb("#e5c07a"),
        hardlinkCount = rgb("#e5c07a"),
        entrySize = rgb("#e5c07a"),
        file = rgb("#e5c07a"),
        permissionExecute = rgb("#62aeef"),
        modificationTime = rgb("#62aeef"),
        link = rgb("#62aeef"),
        keyHints = rgb("#c678dd"),
        keyHintLabels = rgb("#abb2bf"),
        genericElements = rgb("#abb2bf"),
        permissionHeader = rgb("#abb2bf"),
        hardlinkCountHeader = rgb("#abb2bf"),
        userHeader = rgb("#abb2bf"),
        groupHeader = rgb("#abb2bf"),
        entrySizeHeader = rgb("#abb2bf"),
        modificationTimeHeader = rgb("#abb2bf"),
        nameHeader = rgb("#abb2bf"),
        nameDecorations = rgb("#abb2bf"),
    )

    val HackerHacker = Styles(
        path = rgb("#3cbc09"),
        filter = rgb("#a1ff7b"),
        filterMarker = rgb("#a1ff7b"),
        permissionRead = rgb("#00b828"),
        user = rgb("#00b828"),
        group = rgb("#00b828"),
        directory = rgb("#00b828"),
        permissionWrite = rgb("#08ff32"),
        hardlinkCount = rgb("#08ff32"),
        entrySize = rgb("#08ff32"),
        file = rgb("#08ff32"),
        permissionExecute = rgb("#3cbc09"),
        modificationTime = rgb("#3cbc09"),
        link = rgb("#3cbc09"),
        keyHints = rgb("#3cbc09"),
        keyHintLabels = rgb("#267a04"),
        genericElements = rgb("#267a04"),
        permissionHeader = rgb("#267a04"),
        hardlinkCountHeader = rgb("#267a04"),
        userHeader = rgb("#267a04"),
        groupHeader = rgb("#267a04"),
        entrySizeHeader = rgb("#267a04"),
        modificationTimeHeader = rgb("#267a04"),
        nameHeader = rgb("#267a04"),
        nameDecorations = rgb("#267a04"),
    )

    private fun themed(
        main: TextStyle,
        style1: TextStyle,
        style2: TextStyle,
        style3: TextStyle,
        misc: TextStyle = TextColors.white,
        miscDim: TextStyle = TextStyles.dim.style,
    ) = Styles(
        path = main,
        filter = main,
        filterMarker = main,
        keyHints = misc,
        keyHintLabels = miscDim,
        genericElements = miscDim,
        permissionRead = style1,
        permissionWrite = style2,
        permissionExecute = style3,
        permissionHeader = miscDim,
        hardlinkCount = style2,
        hardlinkCountHeader = miscDim,
        user = style1,
        userHeader = miscDim,
        group = style1,
        groupHeader = miscDim,
        entrySize = style2,
        entrySizeHeader = miscDim,
        modificationTime = style3,
        modificationTimeHeader = miscDim,
        directory = style1,
        file = style2,
        link = style3,
        nameHeader = miscDim,
        nameDecorations = miscDim,
    )

    private fun randomBrightColor() = TextColors.hsv(
        h = (0..360).random(),
        s = (500..1000).random() / 1000.0,
        v = (500..1000).random() / 1000.0,
    )
}
